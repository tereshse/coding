Please use this Google doc to code during your interview. To free your hands for coding, we recommend that you use a headset or a phone with speaker option.


Given a sorted 1D array of integers, find the longest sequentially increasing sub-array.

Example:
[] -> []
[1] -> [1]
[-10, 5 , 6] -> [5 , 6]

public static int[] findLongstSequentiallyIncreacingSubarray(int[] array){
	if( array == null ){
	   throw new NullPointerException(“Array must be not null”);
}
if( array.length == 0 ) {
return new int[0];
}
int longestBeginIndex = 0;
int longestEndIndex = 0;
int longestSequenceLength = 0;
int currentBeginIndex = 0;
int currentEndIndex = 0;
// [1,2,5]

for( int i = 0; i < array.length - 1; i++){
	if( array[i+1] - array[i] == 1 ){
currentEndIndex++;
} else {

	int currentSequenceLength =  currentEndIndex - currentBeginIndex; // 1
		if( currentSequenceLength > longestSequenceLength ){
			longestBeginIndex  = currentBeginIndex;
longestEndIndex = currentEndIndex;
longestSequenceLength = currentSequenceLength;
}
currentBeginIndex = i + 1;
currentEndIndex = i + 1;
}
}

int currentSequenceLength =  currentEndIndex - currentBeginIndex;
if( currentSequenceLength > longestSequenceLength ){
	longestBeginIndex  = currentBeginIndex;
longestEndIndex = currentEndIndex;
longestSequenceLength = currentSequenceLength;
}
return System.arraycopy(array, longestBeginIndex, longestEndIndex);

}





[1, 2, 3, 4, 5, 6]

the array is not sorted
the pivot is chosen at random

Given the unsorted array, find the number elements which will always be correctly found.

[2, 1, 3, 5, 4, 6] -> 2
[-, 2, 2, 3, 5, 5]
[1, 3, 4, 4, 6, -]
1 - can’t be found
4 - can’t find
6 - can find
5 - can find

int canBeFoundCount = 0;
for(int i = 0; i < array.length; i++){
	if( hasCorrectPosition(array,i){
canBeFound++;
}
}

boolean hasCorrectPosition(int[] array, int index){
	for( int i = 0 ; i < index; i++){
		if( array[i] > array[index] ){
	return false;
}
}
	for( int i = index ; i < array.length; i++){
		if( array[i] < array[index] ){
	return false;
}
}
return true;

}



